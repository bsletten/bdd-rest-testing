#%RAML 0.8
title: "Swagger Sample App"
version: "1.0.0"
baseUri: "https://petstore.swagger.wordnik.com:443/api"
schemas: 
    - 
        "Tag": '{"type":"object","title":"Tag","properties":{"id":{"type":"integer","required":false,"title":"id"},"name":{"type":"string","required":false,"title":"name"}}}'
        "Pet": '{"type":"object","title":"Pet","properties":{"id":{"type":"integer","required":true,"title":"id","maximum":100.0,"minimum":0.0},"category":{"type":"object","$ref":"#/schemas/Category","required":false,"title":"category"},"name":{"type":"string","required":true,"title":"name"},"photoUrls":{"type":"array","required":false,"title":"photoUrls","items":{"type":"string","title":"photoUrls"},"uniqueItems":false},"tags":{"type":"array","required":false,"title":"tags","items":{"type":"object","$ref":"#/schemas/Tag"},"uniqueItems":false},"status":{"type":"string","required":false,"title":"status"}}}'
        "Category": '{"type":"object","title":"Category","properties":{"id":{"type":"integer","required":false,"title":"id"},"name":{"type":"string","required":false,"title":"name"}}}'
        "File": '{"type":"object","title":"File"}'
        "Order": '{"type":"object","title":"Order","properties":{"id":{"type":"integer","required":false,"title":"id"},"petId":{"type":"integer","required":false,"title":"petId"},"quantity":{"type":"integer","required":false,"title":"quantity"},"status":{"type":"string","required":false,"title":"status"},"shipDate":{"type":"string","required":false,"title":"shipDate"}}}'
        "User": '{"type":"object","title":"User","properties":{"id":{"type":"integer","required":false,"title":"id"},"firstName":{"type":"string","required":false,"title":"firstName"},"userlogin":{"type":"string","required":false,"title":"userlogin"},"lastName":{"type":"string","required":false,"title":"lastName"},"email":{"type":"string","required":false,"title":"email"},"password":{"type":"string","required":false,"title":"password"},"phone":{"type":"string","required":false,"title":"phone"},"userStatus":{"type":"integer","required":false,"title":"userStatus"}}}'
"/pet/findByTags": 
    displayName: "FindPetByTags"
    get: 
        description: "Finds Pets by tags"
        queryParameters: 
            "tags": 
                displayName: "tags"
                description: "Tags to filter by"
                type: string
                required: true
                repeat: true
        responses: 
            "200": 
                description: "Success"
                body: 
                    "application/json": 
                        schema: "Pet"
                        example: '[{"tags":[],"id":1,"category":null,"status":"sample status","name":"sample name","photoUrls":["sample photoUrls"]}]'
                    "application/xml": 
                        schema: "Pet"
                        example: "<ArrayList><item><id>1</id><category/><status>sample status</status><name>sample name</name><photoUrls>sample photoUrls</photoUrls></item></ArrayList>"
                    "text/xml": 
                        schema: "Pet"
                        example: "<ArrayList><item><id>1</id><category/><status>sample status</status><name>sample name</name><photoUrls>sample photoUrls</photoUrls></item></ArrayList>"
            "400": 
                body: 
                    "application/json": 
                        example: ""
                    "application/xml": 
                        example: ""
                    "text/xml": 
                        example: ""
"/pet/{petId}": 
    displayName: "Pet"
    uriParameters: 
        "petId": 
            displayName: "petId"
            description: "ID of pet that needs to be fetched"
            type: number
            required: false
            repeat: false
    get: 
        description: "Find pet by ID"
        responses: 
            "200": 
                description: "Success"
                body: 
                    "application/json": 
                        schema: "Pet"
                        example: '{"tags":[],"id":1,"category":null,"status":"sample status","name":"sample name","photoUrls":["sample photoUrls"]}'
                    "application/xml": 
                        schema: "Pet"
                        example: "<Pet><id>1</id><category/><status>sample status</status><name>sample name</name><photoUrls>sample photoUrls</photoUrls></Pet>"
                    "text/xml": 
                        schema: "Pet"
                        example: "<Pet><id>1</id><category/><status>sample status</status><name>sample name</name><photoUrls>sample photoUrls</photoUrls></Pet>"
            "400": 
                body: 
                    "application/json": 
                        example: ""
                    "application/xml": 
                        example: ""
                    "text/xml": 
                        example: ""
            "404": 
                body: 
                    "application/json": 
                        example: ""
                    "application/xml": 
                        example: ""
                    "text/xml": 
                        example: ""
    delete: 
        description: "Deletes a pet"
        responses: 
            "200": 
                description: "Success"
            "400": 
    post: 
        description: "Updates a pet in the store with form data"
        responses: 
            "200": 
                description: "Success"
            "405": 
"/pet": 
    displayName: "PetList"
    post: 
        description: "Add a new pet to the store"
        body: 
            "application/json": 
                schema: "Pet"
                example: '{"tags":[],"id":1,"category":null,"status":"sample status","name":"sample name","photoUrls":["sample photoUrls"]}'
            "application/xml": 
                schema: "Pet"
                example: "<Pet><id>1</id><category/><status>sample status</status><name>sample name</name><photoUrls>sample photoUrls</photoUrls></Pet>"
            "text/xml": 
                schema: "Pet"
                example: "<Pet><id>1</id><category/><status>sample status</status><name>sample name</name><photoUrls>sample photoUrls</photoUrls></Pet>"
        responses: 
            "200": 
                description: "Success"
            "405": 
    put: 
        description: "Update an existing pet"
        body: 
            "application/json": 
                schema: "Pet"
                example: '{"tags":[],"id":1,"category":null,"status":"sample status","name":"sample name","photoUrls":["sample photoUrls"]}'
            "application/xml": 
                schema: "Pet"
                example: "<Pet><id>1</id><category/><status>sample status</status><name>sample name</name><photoUrls>sample photoUrls</photoUrls></Pet>"
            "text/xml": 
                schema: "Pet"
                example: "<Pet><id>1</id><category/><status>sample status</status><name>sample name</name><photoUrls>sample photoUrls</photoUrls></Pet>"
        responses: 
            "200": 
                description: "Success"
            "400": 
            "404": 
            "405": 
"/pet/findByStatus": 
    displayName: "FindPetByStatus"
    get: 
        description: "Finds Pets by status"
        queryParameters: 
            "status": 
                displayName: "status"
                description: "Status values that need to be considered for filter"
                type: string
                required: true
                repeat: true
                default: "available"
        responses: 
            "200": 
                description: "Success"
                body: 
                    "application/json": 
                        schema: "Pet"
                        example: '[{"tags":[],"id":1,"category":null,"status":"sample status","name":"sample name","photoUrls":["sample photoUrls"]}]'
                    "application/xml": 
                        schema: "Pet"
                        example: "<ArrayList><item><id>1</id><category/><status>sample status</status><name>sample name</name><photoUrls>sample photoUrls</photoUrls></item></ArrayList>"
                    "text/xml": 
                        schema: "Pet"
                        example: "<ArrayList><item><id>1</id><category/><status>sample status</status><name>sample name</name><photoUrls>sample photoUrls</photoUrls></item></ArrayList>"
            "400": 
                body: 
                    "application/json": 
                        example: ""
                    "application/xml": 
                        example: ""
                    "text/xml": 
                        example: ""
"/store/order/{orderId}": 
    displayName: "StoreOrder"
    uriParameters: 
        "orderId": 
            displayName: "orderId"
            description: "ID of the order that needs to be deleted"
            type: string
            required: false
            repeat: false
    delete: 
        description: "Delete purchase order by ID"
        responses: 
            "200": 
                description: "Success"
            "400": 
            "404": 
    get: 
        description: "Find purchase order by ID"
        responses: 
            "200": 
                description: "Success"
                body: 
                    "application/json": 
                        schema: "Order"
                        example: '{"id":1,"petId":1,"status":"sample status","quantity":1,"shipDate":"sample shipDate"}'
            "400": 
                body: 
                    "application/json": 
                        example: ""
            "404": 
                body: 
                    "application/json": 
                        example: ""
"/store/order": 
    displayName: "StoreOrderList"
    post: 
        description: "Place an order for a pet"
        body: 
            "application/json": 
                schema: "Order"
                example: '{"id":1,"petId":1,"status":"sample status","quantity":1,"shipDate":"sample shipDate"}'
        responses: 
            "200": 
                description: "Success"
            "400": 
"/user": 
    displayName: "UserList"
    post: 
        description: "Create user"
        body: 
            "application/json": 
                schema: "User"
                example: '{"id":1,"lastName":"sample lastName","userlogin":"sample userlogin","phone":"sample phone","email":"sample email","userStatus":1,"firstName":"sample firstName","password":"sample password"}'
        responses: 
            "200": 
                description: "Success"
"/user/createWithArray": 
    displayName: "CreateUsersWithArray"
    post: 
        description: "Creates list of users with given input array"
        body: 
            "application/json": 
                schema: "User"
                example: '[{"id":1,"lastName":"sample lastName","userlogin":"sample userlogin","phone":"sample phone","email":"sample email","userStatus":1,"firstName":"sample firstName","password":"sample password"}]'
        responses: 
            "200": 
                description: "Success"
"/user/createWithList": 
    displayName: "CreateUsersWithList"
    post: 
        description: "Creates list of users with given list input"
        body: 
            "application/json": 
                schema: "User"
                example: '[{"id":1,"lastName":"sample lastName","userlogin":"sample userlogin","phone":"sample phone","email":"sample email","userStatus":1,"firstName":"sample firstName","password":"sample password"}]'
        responses: 
            "200": 
                description: "Success"
"/user/{userlogin}": 
    displayName: "User"
    uriParameters: 
        "userlogin": 
            displayName: "userlogin"
            description: "name that need to be deleted"
            type: string
            required: false
            repeat: false
    put: 
        description: "Updated user"
        body: 
            "application/json": 
                schema: "User"
                example: '{"id":1,"lastName":"sample lastName","userlogin":"sample userlogin","phone":"sample phone","email":"sample email","userStatus":1,"firstName":"sample firstName","password":"sample password"}'
        responses: 
            "200": 
                description: "Success"
            "400": 
            "404": 
    delete: 
        description: "Delete user"
        responses: 
            "200": 
                description: "Success"
            "400": 
            "404": 
    get: 
        description: "Get user by user name"
        responses: 
            "200": 
                description: "Success"
                body: 
                    "application/json": 
                        schema: "User"
                        example: '{"id":1,"lastName":"sample lastName","userlogin":"sample userlogin","phone":"sample phone","email":"sample email","userStatus":1,"firstName":"sample firstName","password":"sample password"}'
            "400": 
                body: 
                    "application/json": 
                        example: ""
            "404": 
                body: 
                    "application/json": 
                        example: ""
